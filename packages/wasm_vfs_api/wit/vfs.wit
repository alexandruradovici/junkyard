package junkyard-vfs:vfs-plugin;

interface vfs {
    use vfs-host.{absolute-path};

    variant seek {
        start(u64),
        current(s64),
        end(s64)
    }

    enum kind {
        file,
        folder,
        link,
        unknown
    }

    record stat {
        kind: kind,
        size: u64
    }

    resource file {
        read: func(data: list<u8>) -> result<u64, string>;
        write: func(data: list<u8>) -> result<u64, string>;
        seek: func(s: seek) -> result<u64, string>;
    }

    resource filesystem {
        read-dir: func(path: borrow<absolute-path>) -> result<list<absolute-path>, string>;
        stat: func(path: borrow<absolute-path>) -> result<stat, string>;

        open: func(path: absolute-path) -> result<file, string>;
    }

    init: func() -> result<filesystem>;
}



interface vfs-host {
    resource absolute-path {
        components: func() -> list<string>;
        is-root: func() -> bool;
        parent: func() -> absolute-path;
        file-name: func() -> string;
        path: func() -> string;
    }

    create-absolute-path: func(s: string) -> absolute-path;
}

world vfs-plugin {
    import vfs-host;

    export vfs;
}
